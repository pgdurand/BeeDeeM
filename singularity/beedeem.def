# #############################################################################
# Recipe to build a Singularity image for BeeDeeM software
#
# How to build?
# -------------
#  
#    singularity build -f beedeem.sif beedeem.def
#
# How to configure?
# -----------------
#
# On the contrary of the Docker BeeDeeM implemantation, this Singularity image
# will look at BeeDeeM configuration files outside the container. So basically,
# you have to create a "beedeem-conf" directory where you have to put in the
# full content of "conf" directory (see project source code), then overwrite
# conf/dbms.config file by the one located next to this '.def' file.
# 
# In other words, do something like that (or adapt to production mode):
#   cd $SCRATCH
#   git clone <beedeem-project>
#   cd BeeDeeM/singularity
#   mkdir beedeem-conf
#   cp -R ../conf/* beedeem-conf
#   cp dbms.config beedeem-conf
#
# At runtime (see below), bind your own "beedeem-conf" directory to 
# /beedeem-conf, as stated below.
#
# In such a way, you'll be able to add or edit BeeDeeM bank descriptors, which
# is not possible with the Docker solution.
#
# How to run?
# -----------
#
# BeeDeeM (inside Singularity container) expects to find 4 directories for its 
#  own usage, as follows:
#
#  /software    : to be used to locate Aspera tool
#  /beedeem-wk  : BeeDeeM working (tmp) directory
#  /beedeem-conf: BeeDeeM configuration files
#  /beedeem-db  : place to install databanks loaded by BeeDeeM
#
#  All these folders are defined in the Singularity recipe... so, you have to 
#  use '--bind' argument accordingly to attach these mount points to appropriate
#  folders on your host system.
#
#  Calling a BeeDeeM tool command is then as easy as:
#   install.sh -task download --ftp-delay 5000 --ftp-retry 3 --task-delay 1000 -desc PDB_proteins
#   (standard BeeDeeM command to install PDB_proteins bank)
#
#  Here is a working example (adapt --bind to your host configuration):
#
#    singularity run \
#       --bind /opt/tools:/software \
#       --bind $SCRATCH/beedeem/bdm-wk:/beedeem-wk \
#       --bind $SCRATCH/beedeem/bdm-conf:/beedeem-conf \
#       --bind $SCRATCH/beedeem/bdm-db:/beedeem-db \
#       beedeem.sif \
#       install.sh -task download --ftp-delay 5000 --ftp-retry 3 --task-delay 1000 -desc PDB_proteins 
#
# #############################################################################

# This image relies upon https://github.com/platten/alpine-oracle-jre8-docker
Bootstrap : docker
From: platten/alpine-oracle-jre8-docker

%post
	apk update
	# libbz2 libidn are required by blast tools included in BeeDeeM
	apk add --no-cache wget libbz2 libidn

	# Get BeeDeeM from latest release
	mkdir -p /opt/beedeem/tmp-install
	cd /opt/beedeem/tmp-install
	wget https://github.com/pgdurand/BeeDeeM/releases/download/v4.5.0/beedeem-4.5.0-distrib.zip
	
	# Unpack BeeDeeM to /opt/beedeem
	unzip beedeem-4.5.0-distrib.zip
	tar -zxf beedeem-4.5.0.tar.gz -C /opt/beedeem
	cd ..
	rm -rf tmp-install
	
	# Do a little configuration
	cp scripts/*.sh .
        chmod +x *.sh
	chmod +x /opt/beedeem/external/bin/linux/*
	cd /opt/beedeem/external/bin && rm -rf macos windows

%environment
        export PATH="/opt/beedeem:$PATH"
	export KL_WORKING_DIR=/beedeem-wk
	export KL_CONF_DIR=/beedeem-conf
	export KL_JRE_ARGS="-Xms128M -Xmx2048M -Djava.io.tmpdir=/beedeem-wk"

%runscript
	echo "BeeDeeM container"
	/opt/beedeem/$@

	
